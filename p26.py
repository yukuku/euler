# 1/n+1/n^2+1/n^3+... = 1/(n-1)
# 1/3 = 0.3333333... = 3/10+3/10^2+3/10^3... = 3/(10-1) = 3/9 = 1/3

# /2: 0 recurring
# /5: 0 recurring
# /p where p is prime: min(n where (n-times '9')%p==0)
#   p==7: 999999%7==0: 6 recurring
#   p==11: 
#   p==13: 999999%13==0: 6 recurring
#   p==17: ('1176470588235294' recurring) 9999999999999999%17=0: 16 recurring
#   p==19: 18 recurring
# /q where q is not prime: kpk( recur(k) for k in factors of q )
# print 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000/323
# print 947368421052631578
# print 999999999999999999%19

# 309597523219814241486068111455108359133126934984520123839009287925696594427244582043343653250773993808049535603715170278637770897832817337461300309597523219814241486068111455108359133126934984520123839009287925696594427244582043343653250773993808049535603715170278637770897832817337461300309597523219814241486068111455108359133126934984520123839009287925696594427244582043343653250773993808049

def ispr(n):
	d=2
	while d*d<=n:
		if n%d==0: return False
		d+=1
	return True

def fak(n):
	res=[]
	while True:
		ok=False
		for d in filter(lambda e: ispr(e), range(2, n)):
			if n%d==0:
				n/=d
				res.append(d)
				ok=True
				break
		if not ok: break
	if n!=1: res.append(n)
	return res

def gcd(a,b):
	if a<b: b,a=a,b
	while True:
		if b==0: return a
		a,b=b,a%b

def kpk(a,b): return a*b/gcd(a,b)

def re(d):
	if d==2 or d==5: return 0
	if ispr(d):
		coba=9
		dig=1
		while True:
			if coba%d==0:
				return dig
			coba=coba*10+9
			dig+=1
	res = filter(lambda e: e != 0, (re(f) for f in fak(d)))
	if len(res) == 0: return 0
	return reduce(lambda a,b: kpk(a,b), res, 1)

print max((d for d in range(1,1000)), key=lambda d: re(d))
